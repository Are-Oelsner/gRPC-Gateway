# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gateway_pb2 as gateway__pb2


class GatewayStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getElectrodeState = channel.unary_unary(
                '/gateway.Gateway/getElectrodeState',
                request_serializer=gateway__pb2.ElectrodeNumber.SerializeToString,
                response_deserializer=gateway__pb2.ElectrodeState.FromString,
                )
        self.setElectrodeState = channel.unary_unary(
                '/gateway.Gateway/setElectrodeState',
                request_serializer=gateway__pb2.Electrode.SerializeToString,
                response_deserializer=gateway__pb2.ElectrodeState.FromString,
                )


class GatewayServicer(object):
    """Interface exported by the server.
    """

    def getElectrodeState(self, request, context):
        """RPC that returns state of requested electrode
        Takes in electrode number, returns electrode state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setElectrodeState(self, request, context):
        """RPC that sets a specified electrode's state
        Takes in electrode number and state, returns set electrode state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getElectrodeState': grpc.unary_unary_rpc_method_handler(
                    servicer.getElectrodeState,
                    request_deserializer=gateway__pb2.ElectrodeNumber.FromString,
                    response_serializer=gateway__pb2.ElectrodeState.SerializeToString,
            ),
            'setElectrodeState': grpc.unary_unary_rpc_method_handler(
                    servicer.setElectrodeState,
                    request_deserializer=gateway__pb2.Electrode.FromString,
                    response_serializer=gateway__pb2.ElectrodeState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gateway.Gateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Gateway(object):
    """Interface exported by the server.
    """

    @staticmethod
    def getElectrodeState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.Gateway/getElectrodeState',
            gateway__pb2.ElectrodeNumber.SerializeToString,
            gateway__pb2.ElectrodeState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setElectrodeState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.Gateway/setElectrodeState',
            gateway__pb2.Electrode.SerializeToString,
            gateway__pb2.ElectrodeState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
